diff --git a/Makefile b/Makefile
index f8c820e..ba71aaa 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_syscall_test\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..4eac859 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -241,6 +241,7 @@ userinit(void)
   // and data into it.
   uvmfirst(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
+  p->syscall_count = 0; //init syscall_count
 
   // prepare for the very first "return" from kernel to user.
   p->trapframe->epc = 0;      // user program counter
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..8cdc0fd 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -27,7 +27,6 @@ struct cpu {
 };
 
 extern struct cpu cpus[NCPU];
-
 // per-process data for the trap handling code in trampoline.S.
 // sits in a page by itself just under the trampoline page in the
 // user page table. not specially mapped in the kernel page table.
@@ -91,6 +90,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int syscall_count;           // Number of System Call which have called
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
@@ -105,3 +105,5 @@ struct proc {
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
 };
+
+extern struct proc proc[NPROC];
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..8e33d3d 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_info(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_info]    sys_info,
 };
 
 void
@@ -138,6 +140,7 @@ syscall(void)
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+    p->syscall_count ++;
     p->trapframe->a0 = syscalls[num]();
   } else {
     printf("%d %s: unknown sys call %d\n",
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..c463579 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_info   22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..051c6a7 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,49 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//Depending on the value, it returns different information
+//(1) A count of the processes in the system;
+//(2) A count of the total number of system calls that the current process has made so far;
+//(3) The number of memory pages the current process is using.
+uint64
+sys_info(void)
+{
+  int param;
+  argint(0,&param);
+  
+  uint proc_count = 0;
+  uint syscall_num;
+  uint mem_page;
+  
+  struct proc *current_p = myproc();
+  struct proc *p;
+
+  if(param == 1)
+  {
+    for(p = proc; p < &proc[NPROC];p++){
+      if((p->state == SLEEPING) || (p->state == RUNNABLE ) || (p->state == RUNNING)){
+      proc_count ++;
+      }
+    }
+    printf("Total number of processes: %d\n",proc_count);
+    return 0;
+  }
+  else if(param == 2)
+  {
+    syscall_num = current_p->syscall_count;
+    printf("Total number of system calls made by current process: %d\n",syscall_num);
+    return 0;
+  }
+  else if(param ==3)
+  {
+    uint mem_size = current_p->sz;
+    mem_page = mem_size / PGSIZE;
+    printf("Total number of memory pages used by current process: %d\n",mem_page);
+    return 0;
+  }
+  else
+  {
+    return -1;
+  }
+}
diff --git a/user/syscall_test.c b/user/syscall_test.c
new file mode 100644
index 0000000..04be5bb
--- /dev/null
+++ b/user/syscall_test.c
@@ -0,0 +1,13 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main() {
+  info(1);
+  info(2);
+  info(2);
+  info(3);
+  info(2);
+  info(1);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index f16fe27..e2ce9b5 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int info(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..3388ba0 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("info");
